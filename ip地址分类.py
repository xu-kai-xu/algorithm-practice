# -*- coding: utf-8 -*-
"""
Created on Tue Oct 25 20:22:29 2022

@author: xuk11
"""
import re

def ip_parse(strs):
    """parse legal IP address"""
    ip = [bin(int(item))[2:].zfill(8) for item in strs.split('.')]
    res = ''
    for item in ip:
        res += item
    return '0b' + res


a_lft = ip_parse('1.0.0.0')
a_rig = ip_parse('126.255.255.255')
b_lft = ip_parse('128.0.0.0')
b_rig = ip_parse('191.255.255.255')
c_lft = ip_parse('192.0.0.0')
c_rig = ip_parse('223.255.255.255')
d_lft = ip_parse('224.0.0.0')
d_rig = ip_parse('239.255.255.255')
e_lft = ip_parse('240.0.0.0')
e_rig = ip_parse('255.255.255.255')

p1_lft = ip_parse('10.0.0.0')
p1_rig = ip_parse('10.255.255.255')
p2_lft = ip_parse('172.16.0.0')
p2_rig = ip_parse('172.31.255.255')
p3_lft = ip_parse('192.168.0.0')
p3_rig = ip_parse('192.168.255.255')

non_0_lft = ip_parse('0.0.0.0')
non_0_rig = ip_parse('0.255.255.255')
non_127_lft = ip_parse('127.0.0.0')
non_127_rig = ip_parse('127.255.255.255')


out = {'A': 0, 'B': 0, 'C': 0, 'D': 0, 'E': 0, 'illegal': 0, 'priv': 0}


def ip_msk_parse(strs):
    """parse ip and mask"""
    ip, msk = strs.split('~')
    try:
        ip = [bin(int(item))[2:].zfill(8) for item in ip.split('.')]
        msk = [bin(int(item))[2:].zfill(8) for item in msk.split('.')]
    except ValueError:
        return 5  # 非法IP地址
    res_ip = ''
    for item in ip:
        res_ip += item

    res_msk = ''
    for item in msk:
        res_msk += item

    return ('0b'+res_ip, res_msk)


def ip_classify(ip_tup):
    """
    ip classify
    input: tuple (ip, mask)
    """
    if type(ip_tup) == int:
        out['illegal'] += 1  # 非法IP
    else:
        ip = ip_tup[0]
        msk = ip_tup[1]

        # 首先判断是否为 0. 或 127. 的地址
        if (ip >=non_0_lft) and (ip <=non_0_rig):
            return None
        elif (ip >=non_127_lft) and (ip <=non_127_rig):
            return 127

        # 判断掩码是否合法
        elif re.search(r'01', msk) or (len(set(msk)) == 1):
            out['illegal'] += 1  # 非法掩码
            return 5

        # 掩码合法之后再判断 A-E类
        elif (ip >= a_lft) and (ip <= a_rig):
            out['A'] += 1
            return 0
        elif (ip >= b_lft) and (ip <= b_rig):
            out['B'] += 1
            return 1
        elif (ip >= c_lft) and (ip <= c_rig):
            out['C'] += 1
            return 2
        elif (ip >= d_lft) and (ip <= d_rig):
            out['D'] += 1
            return 3
        elif (ip >= e_lft) and (ip <= e_rig):
            out['E'] += 1
            return 4



# 单独判断非法IP
def priv_ip(ip_tup):
    """
    input: tuple (ip, mask)
    private ip identify
    """

    if type(ip_tup) == int:
        return 5
    else:
        ip = ip_tup[0]
        msk = ip_tup[1]

        if re.search(r'01', msk) or (len(set(msk)) == 1):
            return 5  # 非法掩码,已经在ip_classify中统计过
        if ((ip >= p1_lft) and (ip <= p1_rig)):
            out['priv'] += 1
            return 6
        elif ((ip >= p2_lft) and (ip <= p2_rig)):
            out['priv'] += 1
            return 6
        elif ((ip >= p3_lft) and (ip <= p3_rig)):
            out['priv'] += 1
            return 6


# raw = ['10.70.44.68~255.254.255.0',
#        '1.0.0.1~255.0.0.0',
#        '192.168.0.2~255.255.255.0',
#        '19..0.~255.255.255.0']


# raw = ['178.136.80.23~255.0.0.0',
#        '200.65.151.23~255.255.4.255',
#        '178.58.187.150~255.30.255.255',
#        '194.102.70.40~255.0.0.0',
#        '199.165.138.223~255.0.0.0',
#        '170.224.161.237~255.255.0.0',
#        '52.183.63.36~255.255.0.0',
#        '201.139.83.68~255.0.0.0',
#        '6.13.249.184~255.255.0.0',
#        '98.230.27.222~255.0.0.0',
#        '201.67.65.114~255.255.255.0',
#        '227.188.181.97~255.0.0.0',
#        '154.122.129.76~255.255.255.0']

# raw = ['42.53.252.112~255.0.0.0',
#        '166.237.7.68~255.0.0.0',
#        '136.3.73.64~255.255.0.0',
#        '204.29.136.133~255.255.0.245',
#        '195.30.208.94~255.255.0.213',
#        '154.253.86.183~255.200.255.0',
#        '94.164.187.131~255.255.0.0',
#        '167.79.164.186~255.0.0.0',
#        '194.172.2.64~255.255.0.0',
#        '210.212.79.137~255.255.255.42',
#        '143.151.137.40~255.255.255.255',
#        '184.145.79.157~255.0.0.0',
#        '100.214.131.51~255.255.255.255',
#        '233.10.182.98~255.0.0.125',
#        '99.184.165.228~255.0.0.82',
#        '92.20.159.86~255.0.0.0',
#        '198.198.174.83~255.0.0.0',
#        '17.158.122.89~255.255.75.255',
#        '149.253.103.237~255.0.26.0',
#        '91.243.182.7~255.0.0.0',
#        '36.76.55.4~255.255.255.255',
#        '126.54.86.143~255.0.0.0']
raw = ['225.240.129.203~255.110.255.255',
'183.181.49.4~255.0.0.0',
'172.177.113.45~255.0.0.0',
'176.134.46.246~255.0.0.0',
'153.63.21.56~255.255.58.255',
'23.135.167.228~255.0.0.0',
'204.58.47.149~255.0.0.0',
'113.33.181.46~255.255.255.0',
'73.245.52.119~255.255.154.0',
'23.214.47.71~255.0.0.0',
'139.124.188.91~255.255.255.100',
'142.94.192.197~255.0.0.0',
'53.173.252.202~255.0.0.0',
'127.201.56.50~255.255.111.255',
'118.251.84.111~255.0.0.0',
'130.27.73.170~255.0.0.0',
'253.237.54.56~255.86.0.0',
'64.189.222.111~255.255.255.139',
'148.77.44.147~255.0.0.0',
'59.213.5.253~255.255.0.0',
'3.52.119.131~255.255.0.0',
'213.208.164.145~255.255.0.0',
'24.22.21.206~255.255.90.255',
'89.43.34.31~255.0.0.0',
'9.64.214.75~255.0.0.0',
'110.156.20.173~255.153.0.0',
'71.183.242.53~255.255.0.0',
'119.152.129.100~255.0.0.0',
'38.187.119.201~255.0.0.0',
'73.81.221.180~255.255.255.255',
'73.198.13.199~255.0.15.0',
'99.42.142.145~255.255.255.0',
'196.121.115.160~255.0.0.0',
'226.30.29.206~255.0.0.0',
'244.248.31.171~255.255.255.255',
'59.116.159.246~255.0.0.0',
'121.124.37.157~255.0.0.226',
'103.42.94.71~255.255.0.0',
'125.88.217.249~255.255.74.255',
'73.44.250.101~255.255.255.0']


test = [ip_msk_parse(item) for item in raw]

ip_clas = [ip_classify(item) for item in test]
priv_find = [priv_ip(item) for item in test]

print(out)
